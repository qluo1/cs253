#!/bin/env scons
# vim: ft=python
import glob
import os
import sys
import glob
import socket

PROJ_DIR = os.path.dirname(os.path.abspath('__file__'))
## all build output
BUILD_DIR = os.path.join(PROJ_DIR,"build")

from oma import *

ORBIX_INC = os.path.join(ORBIX,"include")
OMA_ORBIX_INC       = os.path.join(OMA_ORBIX,"include")
OMA_ORBIX_IDL_INC = os.path.join(OMA_ORBIX,"idl","linux6_64b")
OMA_CLIENT_INC = os.path.join(OMA_CLIENT,"include")
OMA_CONST_INC = os.path.join(OMA_CONST,"include")
OMA_BASE_INC = os.path.join(OMA_BASE,"include")
OMA_CBB_INC = os.path.join(OMA_CBB,"include")
GATE_CBB_INC = os.path.join(GATE_CBB,"include")
OMA_CLIENT_EXT = os.path.join(OMA_CLIENT,"extinclude","linux6_64b")
OMA_FACTORY_INC  = os.path.join(OMA_FACTORY,"include")
EQCPPUTIL_INC = os.path.join(EQCPPUTIL,"include")
EQCPPUTIL_IDL_INC = os.path.join(EQCPPUTIL,"idl","linux6_64b")
EQCONFIG_INC = os.path.join(EQCONFIG,"include")

## use clang for the project
USE_CLANG = True
###
env = Environment(
                  CCFLAGS=CCFLAG_GS,
                  CXXFLAGS=CXXFLAG_GS,
                  CPPPATH=[BOOST_INC,
                           RW,
                           ORBIX_INC,
                           GSLOG_INC,GSCPPUTIL,CURL_INC,JSON_INC,MDT_INC,SYBASE_INC,PYTHON_INC,
                           EQCPPUTIL_INC,EQCONFIG_INC,EQUTIL,
                           IVCOM_EXTINC,IVCOM_INC,
                           OMA_ORBIX_INC,
                           OMA_ORBIX_IDL_INC,
                           OMA_CLIENT_INC,
                           OMA_CONST_INC,
                           OMA_BASE_INC,
                           OMA_CBB_INC,
                           OMA_FACTORY_INC,
                           GATE_CBB_INC,
                           ],
                  LIBPATH=LIBPATHS,
                  RPATH=LIBPATHS,
                  LIBS = [
                         "rt",
                         "dl",
                         "boost_python-mt",
                         "boost_thread-mt",
                         ] + LIBS_RW
                           + LIBS_IVCOM
                           + LIBS_ORBIX
                           + LIBS_OMA
)
env_fac = Environment(CCFLAGS=CCFLAG_GS,CXXFLAGS=CXXFLAG_GS,
                      CPPPATH=[
                               GSCPPUTIL,
                               GSLOG_INC,
                               CURL_INC,
                               JSON_INC,
                               BOOST_INC,
                               PCRE_INC,
                               PYTHON_INC,
                               ORBIX_INC,
                               EQUTIL,
                               EQCPPUTIL_INC,
                               EQCPPUTIL_IDL_INC,
                               RW,
                               ],)

if USE_CLANG:
    clang = "~/llvm/bin/clang++"
    ## setup which clang for build
    env_fac['CXX'] = env['CXX'] = clang
    ## setup local clang compiler
    env_fac['ENV']['LD_LIBRARY_PATH'] = env['ENV']['LD_LIBRARY_PATH'] = os.environ['LD_LIBRARY_PATH']


#################################################
## build GSLog/ GSCPPUTIL
src_gslog = glob.glob(GSLOG+"/*.c") + glob.glob(GSLOG+"/*.C")
## ignore
src_gslog = [i for i in src_gslog if not (i.endswith("gslog_stub.c") or
                                          i.endswith("GSLogUtil.C")
                                          )]
obj_gslog=[]
## collect target for both .C and .c
for o in src_gslog:
    t=o.replace(".C",".c").replace(".c",".o_fpic")
    obj_gslog.append(os.path.join(BUILD_DIR,t.split("/")[-1]))

## compile objects
for o,s in zip(obj_gslog,src_gslog):
    env_fac.SharedObject(target=o,source=s)

## compile gscpputil
src_gscpputil = glob.glob(GSCPPUTIL + "/*.cpp")
obj_gscpputil = []

## collect  target
for o in src_gscpputil:
    t=o.replace(".cpp",".o_fpic")
    obj_gscpputil.append(os.path.join(BUILD_DIR,t.split("/")[-1]))

## compile objects
for o,s in zip(obj_gscpputil,src_gscpputil):
    env_fac.SharedObject(target=o,source=s)


#################################################
## build OmaClientPy
src_omapy = [
        'src/OmaClientPy.cpp',
        'src/OmaClientMgr.cpp',
        'src/OmaClientCB.cpp',
        ]

obj_omapy = []

## collect target for both src
for s in src_omapy:
    t=s.replace(".cpp",".o_fpic")
    obj_omapy.append(os.path.join(BUILD_DIR,t.split("/")[-1]))

## compile objects
for o,s in zip(obj_omapy,src_omapy):
    env.SharedObject(target=o,source=s)

libomaclientpy_so = env.SharedLibrary(target="OmaClientPy",source=obj_omapy + obj_gslog + obj_gscpputil ,  LIBPREFIX="")

