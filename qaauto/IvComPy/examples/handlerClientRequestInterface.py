'''
	Author: Luiz Ribeiro (Melbourne Technology Division)
	17/12/2015	
'''

import abc
from utils import convert
from IvComPy import IvComPyClient

class HandlerClientRequestInterface:
	'''
		An abstract class that every class that is going to handle a Request Client MUST implement. 
		This grants to the client that the provided handler has all the necessary methods for request
		communication without performing duck type checking. It also provides a easy and flexible way to 
		extend the request client, allowing each provider interface to perform different actions.
	'''
	__metaclass__ = abc.ABCMeta

	def __init__(self, providerName, handler):
		'''
			Registers the abstract onResponse method to listen to this event when produced by
			the server. It also keeps the server name, which is used to print this object.
			@param providerName (String): the server name
			@param handler (IvComPyClient): the handler object created internally by IvComPy
		'''
		assert type(handler) == IvComPyClient

		self.name = providerName
		self.handler = handler
		self.handler.setupCallback('onResponse', self)


	def sendMessage(self, tableName, messageDict):
		'''
			Sends a message to the request server.
			@oaram tableName (Stirng): the table name described on the loaded catalog
			@param messagDict (dict): a dictionary with the mapping message field -> value
			@returns (bool): True of false indicating if the message was successfully
		'''
		assert messageDict and type(messageDict) == dict
		return self.handler.sendClientRequestDict(str(tableName), convert(messageDict))


	@abc.abstractmethod
	def unregister(self):
		'''
			Stops to listen to the events generated by this provider.
		'''
		return


	@abc.abstractmethod
	def onResponse(self, table, msg):
		'''
			This function is invoked whenever the server responds back a request
			@param table (String) The table name.
			@param msg (dict) A dictionary containning the response message mapping field -> value.
		'''
		return

	def __str__(self):
		return self.name
