# vim: ft=python
import glob
import os
import sys
from pprint import pprint
ROOT    = os.path.dirname(os.path.abspath('__file__'))
BUILD_DIR = os.path.join(ROOT,"build")

from om2_cfg import (GSLOG_INC,
                 GSCPPUTIL,
                 MDT_INC,
                 MDT_LIB,
                 PYTHON_LIB,
                 PYTHON_INC,
                 PCRE_LIB,
                 UUID_LIB,
                 CXXFLAG_GS,
                 CCFLAG_GS,
                 DEBUG,
                 BOOST_INC,
                 BOOST_LIB,
                 GSLOG,
                 )

env = Environment(
                  CCFLAGS=CCFLAG_GS,CXXFLAGS=CXXFLAG_GS,
                  CPPPATH=[MDT_INC,BOOST_INC,PYTHON_INC,GSLOG_INC,GSCPPUTIL],
                  LIBPATH=[MDT_LIB,BOOST_LIB,PYTHON_LIB,PCRE_LIB,UUID_LIB],
                  RPATH=[MDT_LIB,BOOST_LIB,PYTHON_LIB,PCRE_LIB,UUID_LIB],
                  LIBS = [
                         "mdtoolkit",
                         "mdtoolkit-common",
                         "mdtoolkit-extensions",
                         'python2.7',
                         'boost_python',
                         "pthread",
                         "dl",
                         "pcre",
                         "uuid",
                         ]
                  )
## -------------- compile gscpputil, gslog, ivcom,ivcompy -----------------
src_gslog = glob.glob(GSLOG+"/*.c") + glob.glob(GSLOG+"/*.C")
## ignore
src_gslog = [i for i in src_gslog if not (i.endswith("gslog_stub.c") or
                                          i.endswith("GSLogUtil.C")
                                          )]
obj_gslog=[]
## collect target for both .C and .c
for o in src_gslog:
    t=o.replace(".C",".c").replace(".c",".o_fpic")
    obj_gslog.append(os.path.join(BUILD_DIR,t.split("/")[-1]))

## compile objects
for o,s in zip(obj_gslog,src_gslog):
    env.SharedObject(target=o,source=s)

## compile gscpputil
src_gscpputil = glob.glob(GSCPPUTIL + "/*.cpp")
obj_gscpputil = []

## collect  target
for o in src_gscpputil:
    t=o.replace(".cpp",".o_fpic")
    obj_gscpputil.append(os.path.join(BUILD_DIR,t.split("/")[-1]))

## compile objects
for o,s in zip(obj_gscpputil,src_gscpputil):
    env.Object(target=o, source=s)
    env.SharedObject(target=o,source=s)


src = [
        'src/MyMDTListener.cpp',
        'src/MyMDTModule.cpp'
      ]
shj = []

## collect target for both src
for s in src:
    t=s.replace(".cpp",".o_fpic")
    shj.append(os.path.join("build",t.split("/")[-1]))

## compile objects
for sh,s in zip(shj,src):
    env.SharedObject(target=sh,source=s)

env.SharedLibrary(target="MyMDTModule",source=shj + obj_gslog + obj_gscpputil,LIBPREFIX="")

